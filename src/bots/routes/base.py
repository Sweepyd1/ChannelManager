from typing import Optional

from aiogram import Router, types
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, Message

from config import bot, db, description

from ..states.state import RegistrationStates

base_router = Router()
first_channel_id = "-1002401238189"


@base_router.message(CommandStart())
async def send_welcome(message: Message):
    # await message.reply("Hello! Starting task...")
    user = await db.users.new_user(message.from_user.id)
    if user:
        message.reply("—Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        await bot.send_message(chat_id=first_channel_id, text="—Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    await bot.send_message(chat_id=first_channel_id, text="—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–∫–ª—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–∞–Ω")


@base_router.message(Command('showchannelid'))
async def check_channel_id(message: types.Message, state: FSMContext):
    await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ –µ–≥–æ username")

    await state.set_state(RegistrationStates.waiting_for_url)  


@base_router.message(RegistrationStates.waiting_for_url)
async def process_channel_info(message: types.Message, state: FSMContext,):
    try:
        
        
        input_text = message.text.lower()
    

        if "t.me/" in input_text:
            username = "@" + input_text.split("t.me/")[1].split("/")[0].strip()
        elif input_text.startswith("@"):
            username = input_text
        else:
            await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä:\n@channel_name\nhttps://t.me/channel_name")
            await state.clear()
            return
        print(f"username is {username}")

        chat = await bot.get_chat(username)
        
        if chat.type != "channel":
            await message.reply("‚ùå –≠—Ç–æ –Ω–µ –∫–∞–Ω–∞–ª!")
            await state.clear()
            return

        admins = await chat.get_administrators()
        if not any(admin.user.id == bot.id for admin in admins):
            await message.reply("‚ö†Ô∏è –ë–æ—Ç –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞!")
            await state.clear()
            return
        
        await message.reply(
            f"‚úÖ ID: <code>{chat.id}</code>\n"
            f"üë• –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {chat.description}"
            f"üìù –ø—Ä–æ–≤–µ—Ä–∫–∞: {chat.linked_chat_id}", 
            parse_mode="HTML"
        )
        
        await state.clear()

    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()


@base_router.message(Command('about'))
async def cmd_about(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–†—É—Å—Å–∫–∏–π', callback_data='lang_ru'),
         InlineKeyboardButton(text='English', callback_data='lang_en')]
    ])
    await message.answer(description, reply_markup=keyboard)
    
@base_router.callback_query(lambda c: c.data in ['lang_ru', 'lang_en'])
async def process_language_switch(callback_query: CallbackQuery):
    if callback_query.data == 'lang_ru':
        await callback_query.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.")
    elif callback_query.data == 'lang_en':
        await callback_query.answer("You selected English.")

